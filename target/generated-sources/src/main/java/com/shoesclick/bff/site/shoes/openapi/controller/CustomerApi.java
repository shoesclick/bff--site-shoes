/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (6.6.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.shoesclick.bff.site.shoes.openapi.controller;

import com.shoesclick.bff.site.shoes.openapi.model.domain.CustomerRequest;
import com.shoesclick.bff.site.shoes.openapi.model.domain.CustomerResponse;
import com.shoesclick.bff.site.shoes.openapi.model.domain.StatusResponse;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2024-03-09T11:02:37.025393900-03:00[America/Sao_Paulo]")
@Validated
@Tag(name = "Customer", description = "the Customer API")
public interface CustomerApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * DELETE /api/customer/{id} : Remove as informações
     * Remove as informações
     *
     * @param id id do elmento (optional)
     * @return SUCESSO (status code 200)
     */
    @Operation(
        operationId = "deleteCustomer",
        summary = "Remove as informações",
        description = "Remove as informações",
        tags = { "Customer" },
        responses = {
            @ApiResponse(responseCode = "200", description = "SUCESSO", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = StatusResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/api/customer/{id}",
        produces = { "application/json" }
    )
    default ResponseEntity<StatusResponse> _deleteCustomer(
        @Parameter(name = "id", description = "id do elmento", in = ParameterIn.PATH) @PathVariable("id") java.lang.Long id
    ) {
        return deleteCustomer(id);
    }

    // Override this method
    default  ResponseEntity<StatusResponse> deleteCustomer(java.lang.Long id) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"code\" : 0, \"description\" : \"SUCESSO\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/customer/{id} : Obtém as informações
     * Obtém as informações
     *
     * @param id Id do elemento (optional)
     * @return SUCESSO (status code 200)
     */
    @Operation(
        operationId = "getCustomer",
        summary = "Obtém as informações",
        description = "Obtém as informações",
        tags = { "Customer" },
        responses = {
            @ApiResponse(responseCode = "200", description = "SUCESSO", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = CustomerResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/customer/{id}",
        produces = { "application/json" }
    )
    default ResponseEntity<CustomerResponse> _getCustomer(
        @Parameter(name = "id", description = "Id do elemento", in = ParameterIn.PATH) @PathVariable("id") java.lang.Long id
    ) {
        return getCustomer(id);
    }

    // Override this method
    default  ResponseEntity<CustomerResponse> getCustomer(java.lang.Long id) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"id\" : 1, \"name\" : \"NOME\", \"email\" : \"email@email\", \"username\" : \"USUARIO\", \"password\" : \"SENHA\", \"address\" : { \"id\" : 1, \"zipCode\" : \"22222-222\", \"number\" : \"222\", \"street\" : \"\", \"neighborhood\" : \"bairro\", \"state\" : \"ST\", \"city\" : \"cidade\" } }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /api/customer/save : Salva as informações
     * Salva as informações
     *
     * @param customerRequest  (optional)
     * @return SUCESSO (status code 201)
     */
    @Operation(
        operationId = "saveCustomer",
        summary = "Salva as informações",
        description = "Salva as informações",
        tags = { "Customer" },
        responses = {
            @ApiResponse(responseCode = "201", description = "SUCESSO", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = StatusResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/customer/save",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<StatusResponse> _saveCustomer(
        @Parameter(name = "CustomerRequest", description = "") @Valid @RequestBody(required = false) CustomerRequest customerRequest
    ) {
        return saveCustomer(customerRequest);
    }

    // Override this method
    default  ResponseEntity<StatusResponse> saveCustomer(CustomerRequest customerRequest) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"code\" : 0, \"description\" : \"SUCESSO\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
