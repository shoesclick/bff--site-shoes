/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (6.6.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.shoesclick.bff.site.shoes.openapi.controller;

import com.shoesclick.bff.site.shoes.openapi.model.domain.FilterRequest;
import com.shoesclick.bff.site.shoes.openapi.model.domain.ListProductResponse;
import com.shoesclick.bff.site.shoes.openapi.model.domain.ProductResponse;
import com.shoesclick.bff.site.shoes.openapi.model.domain.StatusResponse;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2024-03-09T22:40:33.463755800-03:00[America/Sao_Paulo]")
@Validated
@Tag(name = "Product", description = "the Product API")
public interface ProductApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * DELETE /api/product/{id} : Remove as informações
     * Remove as informações
     *
     * @param id id do elmento (required)
     * @return SUCESSO (status code 200)
     */
    @Operation(
        operationId = "deleteProduct",
        summary = "Remove as informações",
        description = "Remove as informações",
        tags = { "Product" },
        responses = {
            @ApiResponse(responseCode = "200", description = "SUCESSO", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = StatusResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/api/product/{id}",
        produces = { "application/json" }
    )
    default ResponseEntity<StatusResponse> _deleteProduct(
        @Parameter(name = "id", description = "id do elmento", required = true, in = ParameterIn.PATH) @PathVariable("id") java.lang.Long id
    ) {
        return deleteProduct(id);
    }

    // Override this method
    default  ResponseEntity<StatusResponse> deleteProduct(java.lang.Long id) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"code\" : 0, \"description\" : \"SUCESSO\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /api/product/list : Busca todas informações
     * Busca todas informações
     *
     * @param filterRequest  (required)
     * @return SUCESSO (status code 200)
     */
    @Operation(
        operationId = "filterProduct",
        summary = "Busca todas informações",
        description = "Busca todas informações",
        tags = { "Product" },
        responses = {
            @ApiResponse(responseCode = "200", description = "SUCESSO", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ListProductResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/product/list",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<ListProductResponse> _filterProduct(
        @Parameter(name = "FilterRequest", description = "", required = true) @Valid @RequestBody FilterRequest filterRequest
    ) {
        return filterProduct(filterRequest);
    }

    // Override this method
    default  ResponseEntity<ListProductResponse> filterProduct(FilterRequest filterRequest) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"content\" : [ { \"id\" : 3, \"name\" : \"JOSE MAIA\", \"email\" : \"jose@email.com\", \"username\" : \"jose.maia\", \"password\" : \"12345\", \"address\" : { \"id\" : 1, \"zipCode\" : \"200021455\", \"number\" : \"1000\", \"street\" : \"RUA DA ASSEMBLEIA\", \"neighborhood\" : \"CENTRO\", \"city\" : \"RIO DE JANEIRO\", \"state\" : \"RJ\" } } ], \"pageable\" : { \"pageNumber\" : 0, \"pageSize\" : 10, \"sort\" : { \"empty\" : false, \"sorted\" : true, \"unsorted\" : false }, \"offset\" : 0, \"unpaged\" : false, \"paged\" : true }, \"last\" : true, \"totalPages\" : 1, \"totalElements\" : 4, \"first\" : true, \"size\" : 10, \"number\" : 0, \"sort\" : { \"empty\" : false, \"sorted\" : true, \"unsorted\" : false }, \"numberOfElements\" : 4, \"empty\" : false }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/product/{id} : Obtém as informações
     * Obtém as informações
     *
     * @param id Id do elemento (required)
     * @return SUCESSO (status code 200)
     */
    @Operation(
        operationId = "getProduct",
        summary = "Obtém as informações",
        description = "Obtém as informações",
        tags = { "Product" },
        responses = {
            @ApiResponse(responseCode = "200", description = "SUCESSO", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ProductResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/product/{id}",
        produces = { "application/json" }
    )
    default ResponseEntity<ProductResponse> _getProduct(
        @Parameter(name = "id", description = "Id do elemento", required = true, in = ParameterIn.PATH) @PathVariable("id") java.lang.Long id
    ) {
        return getProduct(id);
    }

    // Override this method
    default  ResponseEntity<ProductResponse> getProduct(java.lang.Long id) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"id\" : 1, \"code\" : \"2000\", \"name\" : \"Camisa Polo Azul\", \"description\" : \"Camisa masculina Polo azul\", \"price\" : 1.2 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/product/list : Busca todas informações
     * Busca todas informações
     *
     * @return SUCESSO (status code 200)
     */
    @Operation(
        operationId = "listAllProduct",
        summary = "Busca todas informações",
        description = "Busca todas informações",
        tags = { "Product" },
        responses = {
            @ApiResponse(responseCode = "200", description = "SUCESSO", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ListProductResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/product/list",
        produces = { "application/json" }
    )
    default ResponseEntity<ListProductResponse> _listAllProduct(
        
    ) {
        return listAllProduct();
    }

    // Override this method
    default  ResponseEntity<ListProductResponse> listAllProduct() {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"content\" : [ { \"id\" : 3, \"name\" : \"JOSE MAIA\", \"email\" : \"jose@email.com\", \"username\" : \"jose.maia\", \"password\" : \"12345\", \"address\" : { \"id\" : 1, \"zipCode\" : \"200021455\", \"number\" : \"1000\", \"street\" : \"RUA DA ASSEMBLEIA\", \"neighborhood\" : \"CENTRO\", \"city\" : \"RIO DE JANEIRO\", \"state\" : \"RJ\" } } ], \"pageable\" : { \"pageNumber\" : 0, \"pageSize\" : 10, \"sort\" : { \"empty\" : false, \"sorted\" : true, \"unsorted\" : false }, \"offset\" : 0, \"unpaged\" : false, \"paged\" : true }, \"last\" : true, \"totalPages\" : 1, \"totalElements\" : 4, \"first\" : true, \"size\" : 10, \"number\" : 0, \"sort\" : { \"empty\" : false, \"sorted\" : true, \"unsorted\" : false }, \"numberOfElements\" : 4, \"empty\" : false }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
